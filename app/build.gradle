/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
}

def props = new Properties()

try {
    props.load(new FileInputStream(rootProject.file("build.properties")))
    println "Build version: " + props.getProperty("build.version")
    // Creation of regression output dirs as Java test code fails to do so on Linux
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'mkdir', '-p', 'build/generated/datafiles/private'
        standardOutput = stdout
    }
} catch (Exception e) {
    logger.warn("Properties not Found!")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'footleg.cavesurvey.converter.CaveConverter'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets.main.resources { srcDirs = ["src/main/java"]; include "**/gui/swing/images/*.png" }

jar {
    archivesBaseName = 'CaveConverter'
    from('..') {
        include 'build.properties'
        rename 'build.properties', 'footleg/cavesurvey/gui/app.properties'
    }
    manifest {
        attributes('Main-Class': 'footleg.cavesurvey.gui.swing.MainForm',
                'Implementation-Title': props.getProperty("application.title"),
                'Implementation-Vendor': props.getProperty("application.vendor"),
                'Implementation-Version': props.getProperty("build.version")
                ) 
    }
}
